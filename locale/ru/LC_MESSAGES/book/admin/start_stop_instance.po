
#, fuzzy
msgid "Starting and stopping instances"
msgstr "Запуск/остановка экземпляра"

msgid ""
"To start a Tarantool instance from an :ref:`instance file <admin-"
"instance_file>` using the :ref:`tt <tt-cli>` utility:"
msgstr ""

msgid ""
"Place the instance file (for example, ``my_app.lua``) into "
"``/etc/tarantool/instances.enabled/``. This is the default location where "
"``tt`` searches for instance files."
msgstr ""

msgid "Run ``tt start``:"
msgstr ""

msgid ""
"$ tt start\n"
"   • Starting an instance [my_app]..."
msgstr ""

msgid ""
"In this case, ``tt`` starts an instance from any ``*.lua`` file it finds in "
"``/etc/tarantool/instances.enabled/``."
msgstr ""

#, fuzzy
msgid "Starting instances"
msgstr "Запуск/остановка экземпляра"

msgid ""
"All the instance files or directories placed in the ``instances_enabled`` "
"directory specified in :ref:`tt configuration <tt-config_file>` are called "
"*enabled instances*. If there are several enabled instances, ``tt start`` "
"starts a separate Tarantool instance for each of them."
msgstr ""

msgid ""
"Learn more about working with multiple Tarantool instances in :ref:`Multi-"
"instance applications <admin-start_stop_instance-multi-instance>`."
msgstr ""

msgid ""
"To start a specific enabled instance, specify its name in the ``tt start`` "
"argument:"
msgstr ""

msgid ""
"$ tt start my_app\n"
"   • Starting an instance [my_app]..."
msgstr ""

msgid ""
"When starting an instance, ``tt`` uses its :ref:`configuration file <tt-"
"config>` ``tt.yaml`` to set up a :ref:`tt environment <tt-cli-environments>`"
" in which the instance runs. The default ``tt`` configuration file is "
"created automatically in ``/etc/tarantool/``. Learn how to set up a ``tt`` "
"environment in a directory of your choice in :ref:`Running Tarantool locally"
" <admin-start_stop_instance-running_locally>`."
msgstr ""

msgid ""
"After the instance has started and worked for some time, you can find its "
"artifacts in the directories specified in the ``tt`` configuration. These "
"are the default locations:"
msgstr ""

msgid ""
"``/var/log/tarantool/<instance_name>.log`` -- instance :ref:`logs <admin-"
"logs>`."
msgstr ""

msgid ""
"``/var/lib/tarantool/<instance_name>/`` -- snapshots and write-ahead logs."
msgstr ""

#, fuzzy
msgid ""
"``/var/run/tarantool/<instance_name>.control`` -- a control socket. This is "
"a Unix socket with the Lua console attached to it. This file is used to "
"connect to the instance console."
msgstr ""
"Создает так называемый \"файл для управления экземпляром\". Это Unix-сокет с"
" прикрепленной к нему Lua-консолью. В дальнейшем ``tarantoolctl`` использует"
" этот файл для получения состояния экземпляра,  отправки команд и т.д."

msgid ""
"``/var/run/tarantool/<instance_name>.pid`` -- a PID file that ``tt`` uses to"
" check the instance status and send control commands."
msgstr ""

msgid "Basic instance management"
msgstr ""

msgid ""
"These commands can be called without an instance name. In this case, they "
"are executed for all enabled instances."
msgstr ""

msgid ""
"``tt`` provides a set of commands for performing basic operations over "
"instances:"
msgstr ""

#, fuzzy
msgid "``tt check`` -- check the instance file for syntax errors:"
msgstr ""
"Для проверки файла экземпляра на наличие синтаксических ошибок перед "
"запуском экземпляра ``my_app`` используйте команду:"

msgid ""
"$ tt check my_app\n"
"   • Result of check: syntax of file '/etc/tarantool/instances.enabled/my_app.lua' is OK"
msgstr ""

msgid "``tt status`` -- check the instance status:"
msgstr ""

msgid ""
"$ tt status my_app\n"
"INSTANCE     STATUS          PID\n"
"my_app       NOT RUNNING"
msgstr ""

msgid "``tt restart`` -- restart the instance:"
msgstr ""

msgid ""
"$ tt restart my_app -y\n"
"   • The Instance my_app (PID = 729) has been terminated.\n"
"   • Starting an instance [my_app]..."
msgstr ""

msgid ""
"The ``-y`` option responds \"yes\" to the confirmation prompt automatically."
msgstr ""

msgid "``tt stop`` -- stop the instance:"
msgstr ""

msgid ""
"$ tt stop my_app\n"
"   • The Instance my_app (PID = 639) has been terminated."
msgstr ""

msgid ""
"``tt clean`` -- remove instance artifacts: logs, snapshots, and other files."
msgstr ""

msgid ""
"$ tt clean my_app -f\n"
"   • List of files to delete:\n"
"\n"
"   • /var/log/tarantool/my_app.log\n"
"   • /var/lib/tarantool/my_app/00000000000000000000.snap\n"
"   • /var/lib/tarantool/my_app/00000000000000000000.xlog"
msgstr ""

msgid "The ``-f`` option removes the files without confirmation."
msgstr ""

msgid "Multi-instance applications"
msgstr ""

msgid ""
"Tarantool applications can include multiple instances that run different "
"code. A typical example is a cluster application that includes router and "
"storage instances. The ``tt`` utility enables managing such applications. "
"With a single ``tt`` call, you can:"
msgstr ""

msgid "start an application on multiple instances"
msgstr ""

msgid "check the status of application instances"
msgstr ""

msgid "connect to a specific instance of an application"
msgstr ""

msgid "stop a specific instance of an application or all its instances"
msgstr ""

msgid "Application layout"
msgstr ""

msgid ""
"To create a multi-instance application, prepare its layout in a directory "
"inside ``instances_enabled``. The directory name is used as the application "
"identifier."
msgstr ""

msgid "This directory should contain the following files:"
msgstr ""

msgid ""
"The default instance file named ``init.lua``. This file is used for all "
"instances of the application unless there are specific instance files (see "
"below)."
msgstr ""

msgid ""
"The instances configuration file ``instances.yml`` with instance names "
"followed by colons:"
msgstr ""

msgid ""
"<instance_name1>:\n"
"<instance_name2>:\n"
"..."
msgstr ""

msgid ""
"Do not use the dot (``.``) and dash (``-``) characters in the instance "
"names. They are reserved for system use."
msgstr ""

msgid ""
"(Optional) Specific instances files. These files should have names "
"``<instance_name>.init.lua``, where ``<instance_name>`` is the name "
"specified in ``instances.yml``. For example, if your application has "
"separate source files for the ``router`` and ``storage`` instances, place "
"the router code in the ``router.init.lua`` file."
msgstr ""

msgid ""
"For example, take a ``demo`` application that has three "
"instances:``storage1``, ``storage2``, and ``router``. Storage instances "
"share the same code, and ``router`` has its own. The application directory "
"``demo`` inside ``instances_enabled`` must contain the following files:"
msgstr ""

msgid "``instances.yml`` -- the instances configuration:"
msgstr ""

msgid ""
"storage1:\n"
"storage2:\n"
"router:"
msgstr ""

msgid "``init.lua`` -- the code of ``storage1`` and ``storage2``"
msgstr ""

msgid "``router.init.lua`` -- the code of ``router``"
msgstr ""

msgid "Identifying instances in code"
msgstr ""

msgid ""
"When the application is working, each instance has associated environment "
"variables ``TARANTOOL_INSTANCE_NAME`` and ``TARANTOOL_APP_NAME``. You can "
"use them in the application code to identify the instance on which the code "
"runs."
msgstr ""

msgid "To obtain the instance and application names, use the following code:"
msgstr ""

msgid ""
"local inst_name = os.getenv('TARANTOOL_INSTANCE_NAME')\n"
"local app_name = os.getenv('TARANTOOL_APP_NAME')"
msgstr ""

msgid "Managing multi-instance applications"
msgstr ""

msgid "Start all three instances of the ``demo`` application:"
msgstr ""

msgid ""
"$ tt start demo\n"
"   • Starting an instance [demo:router]...\n"
"   • Starting an instance [demo:storage1]...\n"
"   • Starting an instance [demo:storage2]..."
msgstr ""

msgid "Check the status of ``demo`` instances:"
msgstr ""

msgid ""
"$ tt status demo\n"
"INSTANCE         STATUS      PID\n"
"demo:router      RUNNING     55\n"
"demo:storage1    RUNNING     56\n"
"demo:storage2    RUNNING     57"
msgstr ""

msgid "Check the status of a specific instance:"
msgstr ""

msgid ""
"$ tt status demo:router\n"
"INSTANCE         STATUS      PID\n"
"demo:router      RUNNING     55"
msgstr ""

msgid "Connect to an instance:"
msgstr ""

msgid ""
"$ tt connect demo:router\n"
"   • Connecting to the instance...\n"
"   • Connected to /var/run/tarantool/demo/router/router.control\n"
"\n"
"/var/run/tarantool/demo/router/router.control>"
msgstr ""

msgid "Stop a specific instance:"
msgstr ""

msgid ""
"$ tt stop demo:storage1\n"
"   • The Instance demo:storage1 (PID = 56) has been terminated."
msgstr ""

msgid "Stop all running instances of the ``demo`` application:"
msgstr ""

msgid ""
"$ tt stop demo\n"
"   • The Instance demo:router (PID = 55) has been terminated.\n"
"   • can't \"stat\" the PID file. Error: \"stat /var/run/tarantool/demo/storage1/storage1.pid: no such file or directory\"\n"
"   • The Instance demo:storage2 (PID = 57) has been terminated."
msgstr ""

msgid "The error message indicates that ``storage1`` is already not running."
msgstr ""

msgid "Running Tarantool locally"
msgstr "Локальный запуск Tarantool"

msgid ""
"Sometimes you may need to run a Tarantool instance locally, for example, for"
" test purposes. ``tt`` runs in a local environment if it finds a ``tt.yaml``"
" configuration file in the current directory or any of its enclosing "
"directories."
msgstr ""

msgid "To set up a local environment for ``tt``:"
msgstr ""

#, fuzzy
msgid "Create a home directory for the environment."
msgstr "Сперва создадим директорию-песочницу по следующему пути:"

msgid "Run ``tt init`` in this directory:"
msgstr ""

msgid ""
"$ tt init\n"
"   • Environment config is written to 'tt.yaml'"
msgstr ""

msgid ""
"This command creates a default ``tt`` configuration file ``tt.yaml`` for a "
"local environment and the directories for instance files, control sockets, "
"logs, and other artifacts:"
msgstr ""

msgid ""
"$ ls\n"
"bin  distfiles  include  instances.enabled  modules  templates  tt.yaml"
msgstr ""

msgid "To run a Tarantool instance in the local environment:"
msgstr ""

msgid ""
"Place the instance file into the ``instances.enabled/`` directory inside the"
" current directory."
msgstr ""

msgid "$ tt start"
msgstr ""

msgid ""
"After the instance is started, you can find its artifacts in their locations"
" inside the current directory:"
msgstr ""

msgid "logs in ``var/log/<instance_name>``"
msgstr ""

msgid "snapshots and write-ahead logs in ``var/lib/<instance_name>``"
msgstr ""

msgid "control sockets and PID files in ``var/run/<instance_name>``"
msgstr ""

msgid ""
"To work with a local environment from a directory outside it, issue ``tt`` "
"calls with the ``-L`` or ``--local`` argument with the path to this "
"environment as its value:"
msgstr ""

msgid "$ tt --local=/usr/tt/env/ start"
msgstr ""

msgid "Using systemd tools"
msgstr ""

msgid ""
"If you start an instance using ``systemd`` tools, like this (the instance "
"name is ``my_app``):"
msgstr ""
"При запуске экземпляра с помощью инструментария ``systemd`` указанным ниже "
"способом (имя экземпляра -- ``my_app``):"

msgid ""
"$ systemctl start tarantool@my_app\n"
"$ ps axuf|grep my_app\n"
"taranto+  5350  1.3  0.3 1448872 7736 ?        Ssl  20:05   0:28 tarantool my_app.lua <running>"
msgstr ""
"$ systemctl start tarantool@my_app\n"
"$ ps axuf|grep my_app\n"
"taranto+  5350  1.3  0.3 1448872 7736 ?        Ssl  20:05   0:28 tarantool my_app.lua <running>"

#, fuzzy
msgid ""
"This actually calls ``tarantoolctl`` like in case of ``tarantoolctl start "
"my_app``."
msgstr ""
"...на самом деле вызывается ``tarantoolctl`` -- так же, как и в случае "
"``tarantoolctl start my_app``."

msgid ""
"To enable ``my_app`` instance for auto-load during system startup, say:"
msgstr ""
"Для включения автоматической загрузки экземпляра ``my_app`` при запуске всей"
" системы используйте команду:"

msgid "$ systemctl enable tarantool@my_app"
msgstr "$ systemctl enable tarantool@my_app"

#, fuzzy
msgid "To stop a running ``my_app`` instance with ``systemctl``, run:"
msgstr "Для остановки работающего экземпляра ``my_app`` используйте команду:"

#, fuzzy
msgid "$ systemctl stop tarantool@my_app"
msgstr "$ systemctl enable tarantool@my_app"

#, fuzzy
msgid "To restart a running ``my_app`` instance with ``systemctl``, run:"
msgstr "Для остановки работающего экземпляра ``my_app`` используйте команду:"

#, fuzzy
msgid "$ systemctl restart tarantool@my_app"
msgstr "$ systemctl enable tarantool@my_app"

#~ msgid ""
#~ "While a Lua application is executed by Tarantool, an instance file is "
#~ "executed by ``tarantoolctl`` which is a Tarantool script."
#~ msgstr ""
#~ "Lua-приложение выполняется Tarantool, тогда как файл экземпляра выполняется "
#~ "Tarantool-скриптом ``tarantoolctl``."

#~ msgid "Here is what ``tarantoolctl`` does when you issue the command:"
#~ msgstr "Вот что делает ``tarantoolctl`` при вводе следующей команды:"

#~ msgid "$ tarantoolctl start <instance_name>"
#~ msgstr "$ tarantoolctl start <имя_экземпляра>"

#~ msgid ""
#~ "Read and parse the command line arguments. The last argument, in our case, "
#~ "contains an instance name."
#~ msgstr ""
#~ "Считывает и разбирает аргументы командной строки. В нашем случае последний "
#~ "аргумент содержит имя экземпляра."

#~ msgid ""
#~ "Read and parse its own configuration file. This file contains "
#~ "``tarantoolctl`` defaults, like the path to the directory where instances "
#~ "should be searched for."
#~ msgstr ""
#~ "Считывает и разбирает собственный конфигурационный файл. Этот файл содержит "
#~ "параметры ``tarantoolctl`` по умолчанию -- такие как путь до директории, в "
#~ "которой располагаются экземпляры."

#~ msgid ""
#~ "When ``tarantool`` is invoked by root, it looks for a configuration file in "
#~ "``/etc/default/tarantool``. When ``tarantool`` is invoked by a local (non-"
#~ "root) user, it looks for a configuration file first in the current directory"
#~ " (``$PWD/.tarantoolctl``), and then in the current user's home directory "
#~ "(``$HOME/.config/tarantool/tarantool``). If no configuration file is found "
#~ "there, or in the ``/usr/local/etc/default/tarantool`` file, then "
#~ "``tarantoolctl`` falls back to :ref:`built-in defaults <admin-"
#~ "tarantoolctl_config_file>`."
#~ msgstr ""
#~ "Когда ``tarantoolctl`` вызывается с root-правами, он ищет конфигурационный "
#~ "файл в ``/etc/default/tarantool``. Если вызов ``tarantool`` производит "
#~ "локальный пользователь, сначала он ищет конфигурационный файл в текущей "
#~ "директории (``$PWD/.tarantoolctl``), а затем в домашней директории текущего "
#~ "пользователя (``$HOME/.config/tarantool/tarantool``). Если конфигурационный "
#~ "файл не найден, ``tarantoolctl`` принимает :ref:`встроенные параметры по "
#~ "умолчанию <admin-tarantoolctl_config_file>`."

#~ msgid ""
#~ "Look up the instance file in the instance directory, for example "
#~ "``/etc/tarantool/instances.enabled``. To build the instance file path, "
#~ "``tarantoolctl`` takes the instance name, prepends the instance directory "
#~ "and appends \".lua\" extension to the instance file."
#~ msgstr ""
#~ "Ищет файл экземпляра в директории, где располагаются экземпляры, например, в"
#~ " ``/etc/tarantool/instances.enabled``. ``tarantoolctl`` строит путь до файла"
#~ " экземпляра следующим образом: \"путь до директории с экземплярами\" + \"имя"
#~ " экземпляра\" + \".lua\"."

#~ msgid ""
#~ "Override :doc:`box.cfg{} </reference/reference_lua/box_cfg>` function to "
#~ "pre-process its parameters and ensure that instance paths are pointing to "
#~ "the paths defined in the ``tarantoolctl`` configuration file. For example, "
#~ "if the configuration file specifies that instance work directory must be in "
#~ "``/var/tarantool``, then the new implementation of ``box.cfg{}`` ensures "
#~ "that :ref:`work_dir <cfg_basic-work_dir>` parameter in ``box.cfg{}`` is set "
#~ "to ``/var/tarantool/<instance_name>``, regardless of what the path is set to"
#~ " in the instance file itself."
#~ msgstr ""
#~ "Переопределяет функцию :doc:`box.cfg{} </reference/reference_lua/box_cfg>`, "
#~ "чтобы предобработать ее параметры и сделать так, чтобы пути к экземплярам  "
#~ "указывали на пути, прописанные в конфигурационном файле ``tarantoolctl``. "
#~ "Например, если в конфигурационном файле указано, что рабочей директорией "
#~ "экземпляра является ``/var/tarantool``, то новая реализация ``box.cfg{}`` "
#~ "сделает так, чтобы параметр :ref:`work_dir <cfg_basic-work_dir>` в "
#~ "``box.cfg{}`` имел значение ``/var/tarantool/<имя_экземпляра>``, независимо "
#~ "от того, какой путь указан в самом файле экземпляра."

#~ msgid ""
#~ "Set the TARANTOOLCTL environment variable to 'true'. This allows the user to"
#~ " know that the instance was started by ``tarantoolctl``."
#~ msgstr ""
#~ "Задает значение переменной окружения TARANTOOLCTL = 'true'. Это позволит "
#~ "пользователю понять, что экземпляр был запущен ``tarantoolctl``."

#~ msgid "Finally, use Lua ``dofile`` command to execute the instance file."
#~ msgstr ""
#~ "Наконец, использует Lua-команду ``dofile`` для выполнения файла экземпляра."

#~ msgid "$ tarantoolctl check my_app"
#~ msgstr "$ tarantoolctl check my_app"

#~ msgid ""
#~ "$ tarantoolctl stop my_app\n"
#~ "$ # - OR -\n"
#~ "$ systemctl stop tarantool@my_app"
#~ msgstr ""
#~ "$ tarantoolctl stop my_app\n"
#~ "$ # - ИЛИ -\n"
#~ "$ systemctl stop tarantool@my_app"

#~ msgid "To restart (i.e. stop and start) a running ``my_app`` instance, say:"
#~ msgstr ""
#~ "Для перезапуска (т.е. остановки и запуска) работающего экземпляра ``my_app``"
#~ " используйте команду:"

#~ msgid ""
#~ "$ tarantoolctl restart my_app\n"
#~ "$ # - OR -\n"
#~ "$ systemctl restart tarantool@my_app"
#~ msgstr ""
#~ "$ tarantoolctl restart my_app\n"
#~ "$ # - ИЛИ -\n"
#~ "$ systemctl restart tarantool@my_app"

#~ msgid ""
#~ "Sometimes you may need to run a Tarantool instance locally, e.g. for test "
#~ "purposes. Let's configure a local instance, then start and monitor it with "
#~ "``tarantoolctl``."
#~ msgstr ""
#~ "Иногда бывает необходимо запустить Tarantool локально -- например, для "
#~ "тестирования. Давайте настроим локальный экземпляр, запустим его и будем "
#~ "мониторить с помощью ``tarantoolctl``."

#~ msgid "$ mkdir ~/tarantool_test"
#~ msgstr "$ mkdir ~/tarantool_test"

#~ msgid ""
#~ "... and set default ``tarantoolctl`` configuration in "
#~ "``$HOME/.config/tarantool/tarantool``. Let the file contents be:"
#~ msgstr ""
#~ "...и поместим конфигурационный файл с параметрами ``tarantoolctl`` по "
#~ "умолчанию в ``$HOME/.config/tarantool/tarantool``. Содержимое файла будет "
#~ "таким:"

#~ msgid ""
#~ "default_cfg = {\n"
#~ "    pid_file  = \"/home/user/tarantool_test/my_app.pid\",\n"
#~ "    wal_dir   = \"/home/user/tarantool_test\",\n"
#~ "    snap_dir  = \"/home/user/tarantool_test\",\n"
#~ "    vinyl_dir = \"/home/user/tarantool_test\",\n"
#~ "    log       = \"/home/user/tarantool_test/log\",\n"
#~ "}\n"
#~ "instance_dir = \"/home/user/tarantool_test\""
#~ msgstr ""
#~ "default_cfg = {\n"
#~ "    pid_file  = \"/home/user/tarantool_test/my_app.pid\",\n"
#~ "    wal_dir   = \"/home/user/tarantool_test\",\n"
#~ "    snap_dir  = \"/home/user/tarantool_test\",\n"
#~ "    vinyl_dir = \"/home/user/tarantool_test\",\n"
#~ "    log       = \"/home/user/tarantool_test/log\",\n"
#~ "}\n"
#~ "instance_dir = \"/home/user/tarantool_test\""

#~ msgid "Specify a full path to the user's home directory instead of \"~/\"."
#~ msgstr "Указывайте полный путь к домашней директории пользователя вместо \"~/\"."

#~ msgid ""
#~ "Omit ``username`` parameter. ``tarantoolctl`` normally doesn't have "
#~ "permissions to switch current user when invoked by a local user. The "
#~ "instance will be running under 'admin'."
#~ msgstr ""
#~ "Опустите параметр ``username``. Обычно, когда запуск производит локальный  "
#~ "пользователь, у ``tarantoolctl`` нет разрешения на смену текущего "
#~ "пользователя. Экземпляр будет работать с пользователем 'admin'."

#~ msgid ""
#~ "Next, we create the instance file ``~/tarantool_test/my_app.lua``. Let the "
#~ "file contents be:"
#~ msgstr ""
#~ "Далее создадим файл экземпляра ``~/tarantool_test/my_app.lua``. Содержимое "
#~ "файла будет таким:"

#~ msgid ""
#~ "box.cfg{listen = 3301}\n"
#~ "box.schema.user.passwd('Gx5!')\n"
#~ "box.schema.user.grant('guest','read,write,execute','universe')\n"
#~ "fiber = require('fiber')\n"
#~ "box.schema.space.create('tester')\n"
#~ "box.space.tester:create_index('primary',{})\n"
#~ "i = 0\n"
#~ "while 0 == 0 do\n"
#~ "    fiber.sleep(5)\n"
#~ "    i = i + 1\n"
#~ "    print('insert ' .. i)\n"
#~ "    box.space.tester:insert{i, 'my_app tuple'}\n"
#~ "end"
#~ msgstr ""
#~ "box.cfg{listen = 3301}\n"
#~ "box.schema.user.passwd('Gx5!')\n"
#~ "box.schema.user.grant('guest','read,write,execute','universe')\n"
#~ "fiber = require('fiber')\n"
#~ "box.schema.space.create('tester')\n"
#~ "box.space.tester:create_index('primary',{})\n"
#~ "i = 0\n"
#~ "while 0 == 0 do\n"
#~ "    fiber.sleep(5)\n"
#~ "    i = i + 1\n"
#~ "    print('insert ' .. i)\n"
#~ "    box.space.tester:insert{i, 'my_app tuple'}\n"
#~ "end"

#~ msgid ""
#~ "Let’s verify our instance file by starting it without ``tarantoolctl`` "
#~ "first:"
#~ msgstr ""
#~ "Проверим наш файл экземпляра, сперва запустив его без ``tarantoolctl``:"

#~ msgid ""
#~ "$ cd ~/tarantool_test\n"
#~ "$ tarantool my_app.lua\n"
#~ "2017-04-06 10:42:15.762 [54085] main/101/my_app.lua C> version 1.7.3-489-gd86e36d5b\n"
#~ "2017-04-06 10:42:15.763 [54085] main/101/my_app.lua C> log level 5\n"
#~ "2017-04-06 10:42:15.764 [54085] main/101/my_app.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-04-06 10:42:15.774 [54085] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-04-06 10:42:15.774 [54085] main/101/my_app.lua I> initializing an empty data directory\n"
#~ "2017-04-06 10:42:15.789 [54085] snapshot/101/main I> saving snapshot `./00000000000000000000.snap.inprogress'\n"
#~ "2017-04-06 10:42:15.790 [54085] snapshot/101/main I> done\n"
#~ "2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> vinyl checkpoint done\n"
#~ "2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> ready to accept requests\n"
#~ "insert 1\n"
#~ "insert 2\n"
#~ "insert 3\n"
#~ "<...>"
#~ msgstr ""
#~ "$ cd ~/tarantool_test\n"
#~ "$ tarantool my_app.lua\n"
#~ "2017-04-06 10:42:15.762 [54085] main/101/my_app.lua C> version 1.7.3-489-gd86e36d5b\n"
#~ "2017-04-06 10:42:15.763 [54085] main/101/my_app.lua C> log level 5\n"
#~ "2017-04-06 10:42:15.764 [54085] main/101/my_app.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-04-06 10:42:15.774 [54085] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-04-06 10:42:15.774 [54085] main/101/my_app.lua I> initializing an empty data directory\n"
#~ "2017-04-06 10:42:15.789 [54085] snapshot/101/main I> saving snapshot `./00000000000000000000.snap.inprogress'\n"
#~ "2017-04-06 10:42:15.790 [54085] snapshot/101/main I> done\n"
#~ "2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> vinyl checkpoint done\n"
#~ "2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> ready to accept requests\n"
#~ "insert 1\n"
#~ "insert 2\n"
#~ "insert 3\n"
#~ "<...>"

#~ msgid "Now we tell ``tarantoolctl`` to start the Tarantool instance:"
#~ msgstr "Запустим экземпляр Tarantool с помощью ``tarantoolctl``:"

#~ msgid "$ tarantoolctl start my_app"
#~ msgstr "$ tarantoolctl start my_app"

#~ msgid "Expect to see messages indicating that the instance has started. Then:"
#~ msgstr ""
#~ "В консоли должны появиться сообщения о том, что экземпляр запущен. Затем "
#~ "выполним следующую команду:"

#~ msgid "$ ls -l ~/tarantool_test/my_app"
#~ msgstr "$ ls -l ~/tarantool_test/my_app"

#~ msgid "Expect to see the .snap file and the .xlog file. Then:"
#~ msgstr ""
#~ "В консоли должны появиться .snap-файл и .xlog-файл. Затем выполним следующую"
#~ " команду:"

#~ msgid "$ less ~/tarantool_test/log/my_app.log"
#~ msgstr "$ less ~/tarantool_test/log/my_app.log"

#~ msgid ""
#~ "Expect to see the contents of ``my_app``‘s log, including error messages, if"
#~ " any. Then:"
#~ msgstr ""
#~ "В консоли должно отобразиться содержимое файла журнала для приложения "
#~ "``my_app``, в том числе сообщения об ошибках, если они были. Затем выполним "
#~ "серию команд:"

#~ msgid ""
#~ "$ tarantoolctl enter my_app\n"
#~ "tarantool> box.cfg{}\n"
#~ "tarantool> console = require('console')\n"
#~ "tarantool> console.connect('localhost:3301')\n"
#~ "tarantool> box.space.tester:select({0}, {iterator = 'GE'})"
#~ msgstr ""
#~ "$ tarantoolctl enter my_app\n"
#~ "tarantool> box.cfg{}\n"
#~ "tarantool> console = require('console')\n"
#~ "tarantool> console.connect('localhost:3301')\n"
#~ "tarantool> box.space.tester:select({0}, {iterator = 'GE'})"

#~ msgid "Expect to see several tuples that ``my_app`` has created."
#~ msgstr ""
#~ "В консоли должны появиться несколько кортежей, которые создало приложение "
#~ "``my_app``."

#~ msgid ""
#~ "Stop now. A polite way to stop ``my_app`` is with ``tarantoolctl``, thus we "
#~ "say:"
#~ msgstr ""
#~ "Теперь остановим приложение ``my_app``. Корректный способ остановки -- это "
#~ "использовать``tarantoolctl``:"

#~ msgid "$ tarantoolctl stop my_app"
#~ msgstr "$ tarantoolctl stop my_app"

#~ msgid "Finally, we make a cleanup."
#~ msgstr "Последний шаг -- удаление тестовых данных."

#~ msgid "$ rm -R tarantool_test"
#~ msgstr "$ rm -R tarantool_test"
