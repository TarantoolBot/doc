
msgid "First steps"
msgstr ""

msgid "This is the recommended guide for getting to know the product."
msgstr ""

msgid "You also might want to check out our :ref:`basic Tarantool tutorial "
"<getting_started_db>`. It shows how to launch one Tarantool instance, create"
" a space, build an index, and write data."
msgstr ""

msgid "We recommend that beginners go through the current tutorial first and then "
"see the basic tutorial to dive deeper into the product."
msgstr ""

msgid "If you just want to run the complete tutorial code quickly, go to "
":ref:`Launching an application <app_server-launching_app>`."
msgstr ""

msgid "Installation"
msgstr ""

msgid "**Launch in the cloud**"
msgstr ""

msgid "This tutorial is also available in the cloud. It's free, and it's the "
"fastest way to start. To follow this tutorial in the cloud, go to "
"`try.tarantool.io <https://try.tarantool.io>`__."
msgstr ""

msgid "However, you will still need to install Tarantool if you want to get better "
"acquainted with it."
msgstr ""

msgid "**Run locally**"
msgstr ""

msgid "**For Linux/macOS users:**"
msgstr ""

msgid "Install Tarantool from the `Download page "
"<https://tarantool.io/download>`__."
msgstr ""

msgid "Install the ``cartridge-cli`` utility through your package manager:"
msgstr ""

msgid "sudo yum install cartridge-cli"
msgstr ""

msgid "brew install cartridge-cli"
msgstr ""

msgid "To learn more, check the ``cartridge-cli`` :doc:`installation guide "
"</book/cartridge/cartridge_cli/installation/>`."
msgstr ""

msgid "Clone the `Getting Started tutorial repository "
"<https://github.com/tarantool/getting-started>`__."
msgstr ""

msgid "Everything is ready and organized in this repository. In the cloned "
"directory, run the following:"
msgstr ""

msgid "cartridge build\n"
"cartridge start"
msgstr ""

msgid "You're all set! At http://localhost:8081, you will see the Tarantool "
"Cartridge UI."
msgstr ""

msgid "**Running in Docker:**"
msgstr ""

msgid "docker run -p 3301:3301 -p 8081:8081 tarantool/getting-started"
msgstr ""

msgid "That's it! At http://localhost:8081, you will see the Tarantool Cartridge "
"UI."
msgstr ""

msgid "**For Windows users:**"
msgstr ""

msgid "Use Docker to get started."
msgstr ""

msgid "Getting to know Tarantool"
msgstr ""

msgid "Today, we will solve a high-performance challenge for TikTok using "
"Tarantool."
msgstr ""

msgid "You will implement a counter of likes for videos. First, you will create "
"base tables and search indexes. Then you will set up an HTTP API for mobile "
"clients."
msgstr ""

msgid "The challenge doesn't require you to write any additional code. Everything "
"will be implemented on the Tarantool platform."
msgstr ""

msgid "If you accidentally do something wrong while following the instructions, "
"there is a magic button to help you reset all changes. It is called "
"**\"Reset Configuration\"**.  You can find it at the top of the \"Cluster\" "
"page."
msgstr ""

msgid "Configuring a cluster [1 minute]"
msgstr ""

msgid "**Everything you need to know to get started:**"
msgstr ""

msgid "A Tarantool cluster has two service roles: router and storage."
msgstr ""

msgid "Storage is used to store data."
msgstr ""

msgid "Router is an intermediary between clients and storages. It accepts a "
"client's request, takes data from the proper storage, and returns it to the "
"client."
msgstr ""

msgid "We see that we have 5 unconfigured instances on the \"Cluster\" tab."
msgstr ""

msgid "List of all nodes"
msgstr ""

msgid "Let's create one router and one storage for a start."
msgstr ""

msgid "First, click the \"Configure\" button on the \"router\" instance and "
"configure it as in the screenshot below:"
msgstr ""

msgid "Configuring a router"
msgstr ""

msgid "Next, we configure the \"s1-master\" instance:"
msgstr ""

msgid "Configuring s1-master"
msgstr ""

msgid "It will look something like this:"
msgstr ""

msgid "Cluster view after first setup"
msgstr ""

msgid "Let's enable sharding in the cluster using the \"Bootstrap vshard\" button. "
"It is located in the top right corner."
msgstr ""

msgid "Creating a data schema [2 minutes]"
msgstr ""

msgid "Let's start with the data schema -- take a look at the \"Code\" tab on the "
"left."
msgstr ""

msgid "Here we can create a file called ``schema.yml``. In this file, you can "
"describe the entire cluster's data schema, edit the current schema, validate"
" its correctness, and apply it to the whole cluster."
msgstr ""

msgid ""
"First, let's create the necessary tables. In Tarantool, they are called "
"spaces."
msgstr ""

msgid "We need to store:"
msgstr ""

msgid "Users"
msgstr ""

msgid "Videos with descriptions"
msgstr ""

msgid "Likes for each video"
msgstr ""

msgid ""
"Create a ``schema.yml`` file to load the schema into the cluster. Copy and "
"paste schema to this file. Click the \"Apply\" button. After that, the data "
"schema will be described in the cluster."
msgstr ""

msgid "This is what our data schema will look like:"
msgstr ""

msgid ""
"spaces:\n"
"  users:\n"
"    engine: memtx\n"
"    is_local: false\n"
"    temporary: false\n"
"    sharding_key:\n"
"    - \"user_id\"\n"
"    format:\n"
"    - {name: bucket_id, type: unsigned, is_nullable: false}\n"
"    - {name: user_id, type: uuid, is_nullable: false}\n"
"    - {name: fullname, type: string, is_nullable: false}\n"
"    indexes:\n"
"    - name: user_id\n"
"      unique: true\n"
"      parts: [{path: user_id, type: uuid, is_nullable: false}]\n"
"      type: HASH\n"
"    - name: bucket_id\n"
"      unique: false\n"
"      parts: [{path: bucket_id, type: unsigned, is_nullable: false}]\n"
"      type: TREE\n"
"  videos:\n"
"    engine: memtx\n"
"    is_local: false\n"
"    temporary: false\n"
"    sharding_key:\n"
"    - \"video_id\"\n"
"    format:\n"
"    - {name: bucket_id, type: unsigned, is_nullable: false}\n"
"    - {name: video_id, type: uuid, is_nullable: false}\n"
"    - {name: description, type: string, is_nullable: true}\n"
"    indexes:\n"
"    - name: video_id\n"
"      unique: true\n"
"      parts: [{path: video_id, type: uuid, is_nullable: false}]\n"
"      type: HASH\n"
"    - name: bucket_id\n"
"      unique: false\n"
"      parts: [{path: bucket_id, type: unsigned, is_nullable: false}]\n"
"      type: TREE\n"
"\n"
"  likes:\n"
"    engine: memtx\n"
"    is_local: false\n"
"    temporary: false\n"
"    sharding_key:\n"
"    - \"video_id\"\n"
"    format:\n"
"    - {name: bucket_id, type: unsigned, is_nullable: false}\n"
"    - {name: like_id, type: uuid, is_nullable: false}\n"
"    - {name: user_id, type: uuid, is_nullable: false}\n"
"    - {name: video_id, type: uuid, is_nullable: false}\n"
"    - {name: timestamp, type: string, is_nullable: true}\n"
"    indexes:\n"
"    - name: like_id\n"
"      unique: true\n"
"      parts: [{path: like_id, type: uuid, is_nullable: false}]\n"
"      type: HASH\n"
"    - name: bucket_id\n"
"      unique: false\n"
"      parts: [{path: bucket_id, type: unsigned, is_nullable: false}]\n"
"      type: TREE"
msgstr ""
"spaces:\n"
"  users:\n"
"    engine: memtx\n"
"    is_local: false\n"
"    temporary: false\n"
"    sharding_key:\n"
"    - \"user_id\"\n"
"    format:\n"
"    - {name: bucket_id, type: unsigned, is_nullable: false}\n"
"    - {name: user_id, type: uuid, is_nullable: false}\n"
"    - {name: fullname, type: string, is_nullable: false}\n"
"    indexes:\n"
"    - name: user_id\n"
"      unique: true\n"
"      parts: [{path: user_id, type: uuid, is_nullable: false}]\n"
"      type: HASH\n"
"    - name: bucket_id\n"
"      unique: false\n"
"      parts: [{path: bucket_id, type: unsigned, is_nullable: false}]\n"
"      type: TREE\n"
"  videos:\n"
"    engine: memtx\n"
"    is_local: false\n"
"    temporary: false\n"
"    sharding_key:\n"
"    - \"video_id\"\n"
"    format:\n"
"    - {name: bucket_id, type: unsigned, is_nullable: false}\n"
"    - {name: video_id, type: uuid, is_nullable: false}\n"
"    - {name: description, type: string, is_nullable: true}\n"
"    indexes:\n"
"    - name: video_id\n"
"      unique: true\n"
"      parts: [{path: video_id, type: uuid, is_nullable: false}]\n"
"      type: HASH\n"
"    - name: bucket_id\n"
"      unique: false\n"
"      parts: [{path: bucket_id, type: unsigned, is_nullable: false}]\n"
"      type: TREE\n"
"\n"
"  likes:\n"
"    engine: memtx\n"
"    is_local: false\n"
"    temporary: false\n"
"    sharding_key:\n"
"    - \"video_id\"\n"
"    format:\n"
"    - {name: bucket_id, type: unsigned, is_nullable: false}\n"
"    - {name: like_id, type: uuid, is_nullable: false}\n"
"    - {name: user_id, type: uuid, is_nullable: false}\n"
"    - {name: video_id, type: uuid, is_nullable: false}\n"
"    - {name: timestamp, type: string, is_nullable: true}\n"
"    indexes:\n"
"    - name: like_id\n"
"      unique: true\n"
"      parts: [{path: like_id, type: uuid, is_nullable: false}]\n"
"      type: HASH\n"
"    - name: bucket_id\n"
"      unique: false\n"
"      parts: [{path: bucket_id, type: unsigned, is_nullable: false}]\n"
"      type: TREE"

msgid "It's simple. Let's take a closer look at the essential points."
msgstr ""

msgid ""
"Tarantool has two built-in storage engines: memtx and vinyl. memtx stores "
"all data in RAM while asynchronously writing to disk so that nothing gets "
"lost."
msgstr ""

msgid ""
"Vinyl is a classic engine for storing data on the hard drive. It is "
"optimized for write-intensive scenarios."
msgstr ""

msgid ""
"In TikTok, there are a lot of simultaneous readings and posts: users watch "
"videos, like them, and comment on them. Therefore, let's use memtx."
msgstr ""

msgid ""
"The configuration above describes three memtx spaces (tables) and the "
"necessary indexes for each of the spaces."
msgstr ""

msgid "Each space has two indexes:"
msgstr "" 

msgid "The primary key, which is required to read/write data."
msgstr ""

msgid "An index on the bucket_id field, which is a service field used for sharding."
msgstr ""

msgid "**Important:** The name ``bucket_id`` is reserved. If you choose another "
"name, sharding won't work for this space. If you don't use sharding in your "
"project, you can remove the second index."
msgstr ""

msgid "To understand which field to shard data by, Tarantool uses ``sharding_key``."
" ``sharding_key`` points to fields in the space by which database records "
"will be sharded. There can be more than one such field, but in this example,"
" we will only use one. When some data is inserted, Tarantool forms a hash "
"from this field, calculates the bucket number, and selects the storage to "
"record the data into."
msgstr ""

msgid "Yes, buckets can repeat, and each storage stores a specific range of "
"buckets."
msgstr ""

msgid "Here are a couple more interesting facts:"
msgstr ""

msgid "The ``parts`` field in the index description can contain several fields, "
"which allows building a composite index. You won't need it in this tutorial."
msgstr ""

msgid "Tarantool does not support foreign keys, so you have to check manually upon "
"insertion that ``video_id`` and ``user_id`` exist in the ``likes`` space."
msgstr ""

msgid "Writing data [5 minutes]"
msgstr ""

msgid "We will write data to the Tarantool cluster using the CRUD module. You don't"
" have to specify the shard you want to read from or write to -- the module "
"does it for you."
msgstr ""

msgid "**Important:** All cluster operations must be performed only on the router "
"and using the CRUD module."
msgstr ""

msgid "Let's connect the CRUD module in the code and write three procedures:"
msgstr ""

msgid "User creation"
msgstr ""

msgid "Adding a video"
msgstr ""

msgid "Liking a video"
msgstr ""

msgid "The procedures must be described in a special file. To do this, go to the "
"\"Code\" tab. Create a new directory called ``extensions``, and in this "
"directory, create the file ``api.lua``."
msgstr ""

msgid "Paste the code below into ``api.lua`` and click \"Apply\"."
msgstr ""

msgid ""
"local cartridge = require('cartridge')\n"
"local crud = require('crud')\n"
"local uuid = require('uuid')\n"
"local json = require('json')\n"
"\n"
"function add_user(request)\n"
"    local fullname = request:post_param(\"fullname\")\n"
"    local result, err = crud.insert_object('users', {user_id = uuid.new(), fullname = fullname})\n"
"    if err ~ = nil then\n"
"        return {body = json.encode({status = \"Error!\", error = err}), status = 500}\n"
"    end\n"
"\n"
"    return {body = json.encode({status = \"Success!\", result = result}), status = 200}\n"
"end\n"
"\n"
"function add_video(request)\n"
"    local description = request:post_param(\"description\")\n"
"    local result, err = crud.insert_object('videos', {video_id = uuid.new(), description = description})\n"
"    if err ~= nil then\n"
"        return {body = json.encode({status = \"Error!\", error = err}), status = 500}\n"
"    end\n"
"\n"
"    return {body = json.encode({status = \"Success!\", result = result}), status = 200}\n"
"end\n"
"\n"
"function like_video(request)\n"
"    local video_id = request: post_param(\"video_id\")\n"
"    local user_id = request: post_param(\"user_id\")\n"
"\n"
"    local result, err = crud.insert_object('likes', {like_id = uuid.new(),\n"
"                                                video_id = uuid.fromstr(video_id),\n"
"                                                user_id = uuid.fromstr(user_id)})\n"
"    if err ~= nil then\n"
"        return {body = json.encode({status = \"Error!\", error = err}), status = 500}\n"
"    end\n"
"\n"
"    return {body = json.encode({status = \"Success!\", result = result}), status = 200}\n"
"end\n"
"\n"
"return {\n"
"    add_user = add_user,\n"
"    add_video = add_video,\n"
"    like_video = like_video,\n"
"}"
msgstr ""

msgid "Setting up HTTP API [2 minutes]"
msgstr ""

msgid "Clients will visit the Tarantool cluster using the HTTP protocol. The "
"cluster already has a built-in HTTP server."
msgstr ""

msgid "To configure HTTP paths, you need to write a configuration file. Go to the "
"\"Code\" tab. Create the file ``config.yml`` in the ``extensions`` "
"directory, which you created on the last step."
msgstr ""

msgid "Paste the configuration example below into ``config.yml`` and click "
"\"Apply\"."
msgstr ""

msgid ""
"---\n"
" functions:\n"
"\n"
"   customer_add:\n"
"     module: extensions.api\n"
"     handler: add_user\n"
"     events:\n"
"     - http: {path: \"/add_user\", method: POST}\n"
"\n"
"   account_add:\n"
"     module: extensions.api\n"
"     handler: add_video\n"
"     events:\n"
"     - http: {path: \"/add_video\", method: POST}\n"
"\n"
"   transfer_money:\n"
"     module: extensions.api\n"
"     handler: like_video\n"
"     events:\n"
"     - http: {path: \"/like_video\", method: POST}\n"
"..."
msgstr ""

msgid "Done! Let's make test requests from the console:"
msgstr ""

msgid "curl -X POST --data \"fullname = Taran Tool\" <ip:port>/add_user"
msgstr ""

msgid "We've just created a user and got their UUID. Let's remember it."
msgstr ""

msgid "curl -X POST --data \"description = My first tiktok\" <ip:port>/add_video"
msgstr ""

msgid "Let's say a user has added their first video with a description. The video "
"clip also has a UUID. Let's remember it, too."
msgstr ""

msgid "In order to \"like\" the video, you need to specify the user UUID and the "
"video UUID. Substitute the ellipses in the command below with the "
"corresponding UUIDs:"
msgstr ""

msgid "curl -X POST --data \"video_id = ... & user_id = ...\" <ip: port>/like_video"
msgstr ""

msgid "The result will be something like this:"
msgstr ""

msgid "Test queries in the console"
msgstr ""

msgid "In our example, you can \"like\" the video as many times as you want. It "
"makes no sense in the real life, but it will help us understand how sharding"
" works -- more precisely, the ``sharding_key`` parameter."
msgstr ""

msgid "Our ``sharding_key`` for the ``likes`` is ``video_id``. We also specified a "
"``sharding_key`` for the ``videos`` space. It means that likes will be "
"stored on the same storage as videos. This ensures data locality with regard"
" to storage and allows getting all the information you need in one network "
"trip to Storage."
msgstr ""

msgid "More details are described on the next step."
msgstr ""

msgid "Looking at the data [1 minute]"
msgstr ""

msgid "Go to the \"Space-Explorer\" tab to see all the nodes in the cluster. As we "
"have only one storage and one router started so far, the data is stored on "
"only one node."
msgstr ""

msgid "Let's go to the node ``s1-master``: click \"Connect\" and select the "
"necessary space."
msgstr ""

msgid "Check that everything is in place and move on."
msgstr ""

msgid "Space Explorer, host list"
msgstr ""

msgid "Space Explorer, view likes"
msgstr ""

msgid "Space Explorer, viewing likes"
msgstr ""

msgid "Please note that the Space-Explorer tool is only available in the Enterprise"
" version of the product and in the Try Tarantool cloud service. In the open-"
"source version, use the console to view data."
msgstr ""

msgid "Check our documentation to learn more about :doc:`data viewing "
"</reference/reference_lua/box_space/select/>`. To learn how to connect to a "
"Tarantool instance, :ref:`read the basic Tarantool manual "
"<getting_started_db>`."
msgstr ""

msgid "Scaling the cluster [1 minute]"
msgstr ""

msgid "Let's create a second shard. Click on the \"Cluster\" tab, select "
"``s2-master``, and click \"Configure\". Select the roles as shown in the "
"picture:"
msgstr ""

msgid "Cluster, new shard configuration screen"
msgstr ""

msgid "Click on the necessary roles and create a shard (replica set)."
msgstr ""

msgid "Checking how sharding works [1 minute]"
msgstr ""

msgid "Now we have two shards -- two logical nodes that share data among themselves."
" The router decides what piece of data goes to what shard. By default, the "
"router uses the hash function from the field ``sharding_key`` we've "
"specified in the DDL."
msgstr ""

msgid "To enable a new shard, you need to set its weight to one. Go back to the "
"\"Cluster\" tab, open the ``s2-master`` settings, set the Replica set weight"
" to 1, and apply."
msgstr ""

msgid "Something has already happened. Let's go to Space-Explorer and check the "
"node ``s2-master``. It turns out that some of the data from the first shard "
"has already migrated here! The scaling is done automatically."
msgstr ""

msgid "Now let's try adding more data to the cluster via the HTTP API. We can check"
" back later and make sure that the new data is also evenly distributed "
"across the two shards."
msgstr ""

msgid "Disconnecting a shard for a while [1 minute]"
msgstr ""

msgid "In the ``s1-master`` settings, set Replica set weight to 0 and apply. Wait "
"for a few seconds, then go to Space-Explorer and look at the data in "
"``s2-master``. You will see that all the data has been migrated to the "
"remaining shard automatically."
msgstr ""

msgid "Now we can safely disable the first shard for maintenance."
msgstr ""

msgid "See also"
msgstr ""

msgid "README of the `DDL <https://github.com/tarantool/ddl>`__ module to create "
"your own data schema."
msgstr ""

msgid "README of the `CRUD <https://github.com/tarantool/crud>`__ module to learn "
"more about the API and create your own cluster queries."
msgstr ""

msgid "To continue to the next steps of the tutorial, click the button in the "
"bottom right corner or select the section in the table of contents on the "
"left."
msgstr ""
